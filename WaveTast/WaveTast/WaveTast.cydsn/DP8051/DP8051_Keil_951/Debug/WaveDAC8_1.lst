C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE WAVEDAC8_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\WaveDAC8_1.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\WaveDAC8_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\WaveDAC8_1.lst) CD DB NOI
                    -P OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\WaveDAC8_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: WaveDAC8_1.c
   3          * Version 2.0
   4          *
   5          * Description:
   6          *  This file provides the source code for the 8-bit Waveform DAC 
   7          *  (WaveDAC8) Component.
   8          *
   9          ********************************************************************************
  10          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "WaveDAC8_1.h"
  17          
  18          uint8  WaveDAC8_1_initVar = 0u;
  19          
  20          const uint8 CYCODE WaveDAC8_1_wave1[WaveDAC8_1_WAVE1_LENGTH] = { 128u,135u,143u,151u,159u,166u,174u,181u,1
             -88u,194u,201u,207u,213u,219u,224u,229u,233u,237u,241u,244u,246u,249u,250u,252u,252u,252u,252u,252u,250u,249u,246u,244u,2
             -41u,237u,233u,229u,224u,219u,213u,207u,201u,194u,188u,181u,174u,166u,159u,151u,143u,135u,128u,120u,112u,104u,96u,89u,81u
             -,74u,67u,61u,54u,48u,42u,36u,31u,26u,22u,18u,14u,11u,9u,6u,5u,3u,3u,3u,3u,3u,5u,6u,9u,11u,14u,18u,22u,26u,31u,36u,42u,48
             -u,54u,61u,67u,74u,81u,89u,96u,104u,112u,120u };
  21          const uint8 CYCODE WaveDAC8_1_wave2[WaveDAC8_1_WAVE2_LENGTH] = { 128u,132u,138u,143u,148u,152u,158u,162u,1
             -68u,172u,178u,182u,188u,192u,198u,202u,208u,213u,218u,222u,228u,232u,238u,242u,248u,252u,248u,242u,238u,232u,228u,222u,2
             -18u,212u,208u,202u,198u,192u,188u,182u,178u,173u,168u,162u,158u,152u,148u,143u,138u,132u,128u,122u,118u,112u,107u,102u,9
             -7u,93u,88u,83u,78u,73u,68u,62u,57u,52u,47u,42u,37u,33u,28u,23u,18u,13u,8u,3u,8u,13u,18u,23u,28u,33u,37u,42u,47u,52u,57u,
             -62u,68u,73u,78u,83u,88u,93u,97u,102u,107u,112u,118u,122u };
  22          
  23          static uint8  WaveDAC8_1_Wave1Chan;
  24          static uint8  WaveDAC8_1_Wave2Chan;
  25          static uint8  WaveDAC8_1_Wave1TD;
  26          static uint8  WaveDAC8_1_Wave2TD;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: WaveDAC8_1_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initializes component with parameters set in the customizer.
  35          *
  36          * Parameters:  
  37          *  None
  38          *
  39          * Return: 
  40          *  None
  41          *
  42          *******************************************************************************/
  43          void WaveDAC8_1_Init(void) 
  44          {
  45   1              WaveDAC8_1_VDAC8_Init();
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 2   

  46   1              WaveDAC8_1_VDAC8_SetSpeed(WaveDAC8_1_HIGHSPEED);
  47   1              WaveDAC8_1_VDAC8_SetRange(WaveDAC8_1_DAC_RANGE);
  48   1      
  49   1              #if(WaveDAC8_1_DAC_MODE == WaveDAC8_1_CURRENT_MODE)
                              WaveDAC8_1_IDAC8_SetPolarity(WaveDAC8_1_DAC_POL);
                      #endif /* WaveDAC8_1_DAC_MODE == WaveDAC8_1_CURRENT_MODE */
  52   1      
  53   1              #if(WaveDAC8_1_OUT_MODE == WaveDAC8_1_BUFFER_MODE)
                         WaveDAC8_1_BuffAmp_Init();
                      #endif /* WaveDAC8_1_OUT_MODE == WaveDAC8_1_BUFFER_MODE */
  56   1      
  57   1              /* Get the TD Number for the DMA channel 1 and 2   */
  58   1              WaveDAC8_1_Wave1TD = CyDmaTdAllocate();
  59   1              WaveDAC8_1_Wave2TD = CyDmaTdAllocate();
  60   1              
  61   1              /* Initialize waveform pointers  */
  62   1              WaveDAC8_1_Wave1Setup(WaveDAC8_1_wave1, WaveDAC8_1_WAVE1_LENGTH) ;
  63   1              WaveDAC8_1_Wave2Setup(WaveDAC8_1_wave2, WaveDAC8_1_WAVE2_LENGTH) ;
  64   1              
  65   1              /* Initialize the internal clock if one present  */
  66   1              #if defined(WaveDAC8_1_DacClk_PHASE)
                         WaveDAC8_1_DacClk_SetPhase(WaveDAC8_1_CLK_PHASE_0nS);
                      #endif /* defined(WaveDAC8_1_DacClk_PHASE) */
  69   1      }
  70          
  71          
  72          /*******************************************************************************
  73          * Function Name: WaveDAC8_1_Enable
  74          ********************************************************************************
  75          *  
  76          * Summary: 
  77          *  Enables the DAC block and DMA operation.
  78          *
  79          * Parameters:  
  80          *  None
  81          *
  82          * Return: 
  83          *  None
  84          *
  85          *******************************************************************************/
  86          void WaveDAC8_1_Enable(void) 
  87          {
  88   1              WaveDAC8_1_VDAC8_Enable();
  89   1      
  90   1              #if(WaveDAC8_1_OUT_MODE == WaveDAC8_1_BUFFER_MODE)
                         WaveDAC8_1_BuffAmp_Enable();
                      #endif /* WaveDAC8_1_OUT_MODE == WaveDAC8_1_BUFFER_MODE */
  93   1      
  94   1              /* 
  95   1              * Enable the channel. It is configured to remember the TD value so that
  96   1              * it can be restored from the place where it has been stopped.
  97   1              */
  98   1              (void)CyDmaChEnable(WaveDAC8_1_Wave1Chan, 1u);
  99   1              (void)CyDmaChEnable(WaveDAC8_1_Wave2Chan, 1u);
 100   1              
 101   1              /* set the initial value */
 102   1              WaveDAC8_1_SetValue(0u);
 103   1              
 104   1              #if(WaveDAC8_1_CLOCK_SRC == WaveDAC8_1_CLOCK_INT)       
 105   1                 WaveDAC8_1_DacClk_Start();
 106   1              #endif /* WaveDAC8_1_CLOCK_SRC == WaveDAC8_1_CLOCK_INT */
 107   1      }
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 3   

 108          
 109          
 110          /*******************************************************************************
 111          * Function Name: WaveDAC8_1_Start
 112          ********************************************************************************
 113          *
 114          * Summary:
 115          *  The start function initializes the voltage DAC with the default values, 
 116          *  and sets the power to the given level.  A power level of 0, is the same as 
 117          *  executing the stop function.
 118          *
 119          * Parameters:  
 120          *  None
 121          *
 122          * Return: 
 123          *  None
 124          *
 125          * Reentrant:
 126          *  No
 127          *
 128          *******************************************************************************/
 129          void WaveDAC8_1_Start(void) 
 130          {
 131   1              /* If not Initialized then initialize all required hardware and software */
 132   1              if(WaveDAC8_1_initVar == 0u)
 133   1              {
 134   2                      WaveDAC8_1_Init();
 135   2                      WaveDAC8_1_initVar = 1u;
 136   2              }
 137   1              
 138   1              WaveDAC8_1_Enable();
 139   1      }
 140          
 141          
 142          /*******************************************************************************
 143          * Function Name: WaveDAC8_1_StartEx
 144          ********************************************************************************
 145          *
 146          * Summary:
 147          *  The StartEx function sets pointers and sizes for both waveforms
 148          *  and then starts the component.
 149          *
 150          * Parameters:  
 151          *   uint8 * wavePtr1:     Pointer to the waveform 1 array.
 152          *   uint16  sampleSize1:  The amount of samples in the waveform 1.
 153          *   uint8 * wavePtr2:     Pointer to the waveform 2 array.
 154          *   uint16  sampleSize2:  The amount of samples in the waveform 2.
 155          *
 156          * Return: 
 157          *  None
 158          *
 159          * Reentrant:
 160          *  No
 161          *
 162          *******************************************************************************/
 163          void WaveDAC8_1_StartEx(const uint8 * wavePtr1, uint16 sampleSize1, const uint8 * wavePtr2, uint16 sampleS
             -ize2)
 164          
 165          {
 166   1              WaveDAC8_1_Wave1Setup(wavePtr1, sampleSize1);
 167   1              WaveDAC8_1_Wave2Setup(wavePtr2, sampleSize2);
 168   1              WaveDAC8_1_Start();
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 4   

 169   1      }
 170          
 171          
 172          /*******************************************************************************
 173          * Function Name: WaveDAC8_1_Stop
 174          ********************************************************************************
 175          *
 176          * Summary:
 177          *  Stops the clock (if internal), disables the DMA channels
 178          *  and powers down the DAC.
 179          *
 180          * Parameters:  
 181          *  None  
 182          *
 183          * Return: 
 184          *  None
 185          *
 186          *******************************************************************************/
 187          void WaveDAC8_1_Stop(void) 
 188          {
 189   1              /* Turn off internal clock, if one present */
 190   1              #if(WaveDAC8_1_CLOCK_SRC == WaveDAC8_1_CLOCK_INT)       
 191   1                 WaveDAC8_1_DacClk_Stop();
 192   1              #endif /* WaveDAC8_1_CLOCK_SRC == WaveDAC8_1_CLOCK_INT */
 193   1              
 194   1              /* Disble DMA channels */
 195   1              (void)CyDmaChDisable(WaveDAC8_1_Wave1Chan);
 196   1              (void)CyDmaChDisable(WaveDAC8_1_Wave2Chan);
 197   1      
 198   1              /* Disable power to DAC */
 199   1              WaveDAC8_1_VDAC8_Stop();
 200   1      }
 201          
 202          
 203          /*******************************************************************************
 204          * Function Name: WaveDAC8_1_Wave1Setup
 205          ********************************************************************************
 206          *
 207          * Summary:
 208          *  Sets pointer and size for waveform 1.                                    
 209          *
 210          * Parameters:  
 211          *  uint8 * WavePtr:     Pointer to the waveform array.
 212          *  uint16  SampleSize:  The amount of samples in the waveform.
 213          *
 214          * Return: 
 215          *  None 
 216          *
 217          *******************************************************************************/
 218          void WaveDAC8_1_Wave1Setup(const uint8 * wavePtr, uint16 sampleSize)
 219          
 220          {
 221   1              #if (CY_PSOC3)
 222   1                      uint16 memoryType; /* determining the source memory type */
 223   1                      memoryType = (WaveDAC8_1_HI16FLASHPTR == HI16(wavePtr)) ? HI16(CYDEV_FLS_BASE) : HI16(CYDEV_SRAM_BASE);
 224   1                      
 225   1                      WaveDAC8_1_Wave1Chan = WaveDAC8_1_Wave1_DMA_DmaInitialize(
 226   1                      WaveDAC8_1_Wave1_DMA_BYTES_PER_BURST, WaveDAC8_1_Wave1_DMA_REQUEST_PER_BURST,
 227   1                      memoryType, HI16(CYDEV_PERIPH_BASE));
 228   1              #else /* PSoC 5 */
                              WaveDAC8_1_Wave1Chan = WaveDAC8_1_Wave1_DMA_DmaInitialize(
                              WaveDAC8_1_Wave1_DMA_BYTES_PER_BURST, WaveDAC8_1_Wave1_DMA_REQUEST_PER_BURST,
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 5   

                              HI16(wavePtr), HI16(WaveDAC8_1_DAC8__D));
                      #endif /* CY_PSOC3 */
 233   1              
 234   1              /*
 235   1              * TD is looping on itself. 
 236   1          * Increment the source address, but not the destination address. 
 237   1              */
 238   1              (void)CyDmaTdSetConfiguration(WaveDAC8_1_Wave1TD, sampleSize, WaveDAC8_1_Wave1TD, 
 239   1                                          (uint8)CY_DMA_TD_INC_SRC_ADR | (uint8)WaveDAC8_1_Wave1_DMA__TD_TERMOUT
             -_EN); 
 240   1              
 241   1              /* Set the TD source and destination address */
 242   1              (void)CyDmaTdSetAddress(WaveDAC8_1_Wave1TD, LO16((uint32)wavePtr), LO16(WaveDAC8_1_DAC8__D));
 243   1              
 244   1              /* Associate the TD with the channel */
 245   1              (void)CyDmaChSetInitialTd(WaveDAC8_1_Wave1Chan, WaveDAC8_1_Wave1TD);
 246   1      }
 247          
 248          
 249          /*******************************************************************************
 250          * Function Name: WaveDAC8_1_Wave2Setup
 251          ********************************************************************************
 252          *
 253          * Summary:
 254          *  Sets pointer and size for waveform 2.                                    
 255          *
 256          * Parameters:  
 257          *  uint8 * WavePtr:     Pointer to the waveform array.
 258          *  uint16  SampleSize:  The amount of samples in the waveform.
 259          *
 260          * Return: 
 261          *  None
 262          *
 263          *******************************************************************************/
 264          void WaveDAC8_1_Wave2Setup(const uint8 * wavePtr, uint16 sampleSize)
 265           
 266          {
 267   1              #if (CY_PSOC3)
 268   1                      uint16 memoryType; /* determining the source memory type */
 269   1                      memoryType = (WaveDAC8_1_HI16FLASHPTR == HI16(wavePtr)) ? HI16(CYDEV_FLS_BASE) : HI16(CYDEV_SRAM_BASE);
 270   1                              
 271   1                      WaveDAC8_1_Wave2Chan = WaveDAC8_1_Wave2_DMA_DmaInitialize(
 272   1                      WaveDAC8_1_Wave2_DMA_BYTES_PER_BURST, WaveDAC8_1_Wave2_DMA_REQUEST_PER_BURST,
 273   1                      memoryType, HI16(CYDEV_PERIPH_BASE));
 274   1              #else /* PSoC 5 */
                              WaveDAC8_1_Wave2Chan = WaveDAC8_1_Wave2_DMA_DmaInitialize(
                              WaveDAC8_1_Wave2_DMA_BYTES_PER_BURST, WaveDAC8_1_Wave2_DMA_REQUEST_PER_BURST,
                              HI16(wavePtr), HI16(WaveDAC8_1_DAC8__D));
                      #endif /* CY_PSOC3 */
 279   1              
 280   1              /*
 281   1              * TD is looping on itself. 
 282   1              * Increment the source address, but not the destination address. 
 283   1              */
 284   1              (void)CyDmaTdSetConfiguration(WaveDAC8_1_Wave2TD, sampleSize, WaveDAC8_1_Wave2TD, 
 285   1                                          (uint8)CY_DMA_TD_INC_SRC_ADR | (uint8)WaveDAC8_1_Wave2_DMA__TD_TERMOUT
             -_EN); 
 286   1              
 287   1              /* Set the TD source and destination address */
 288   1              (void)CyDmaTdSetAddress(WaveDAC8_1_Wave2TD, LO16((uint32)wavePtr), LO16(WaveDAC8_1_DAC8__D));
 289   1              
 290   1              /* Associate the TD with the channel */
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 6   

 291   1              (void)CyDmaChSetInitialTd(WaveDAC8_1_Wave2Chan, WaveDAC8_1_Wave2TD);
 292   1      }
 293          
 294          
 295          /* [] END OF FILE */
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION WaveDAC8_1_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0000 120000      E     LCALL   WaveDAC8_1_VDAC8_Init
                                           ; SOURCE LINE # 46
0003 7F02              MOV     R7,#02H
0005 120000      E     LCALL   _WaveDAC8_1_VDAC8_SetSpeed
                                           ; SOURCE LINE # 47
0008 7F04              MOV     R7,#04H
000A 120000      E     LCALL   _WaveDAC8_1_VDAC8_SetRange
                                           ; SOURCE LINE # 58
000D 120000      E     LCALL   CyDmaTdAllocate
0010 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1TD
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 59
0015 120000      E     LCALL   CyDmaTdAllocate
0018 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2TD
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
001D 7BFF              MOV     R3,#0FFH
001F 7A00        R     MOV     R2,#HIGH WaveDAC8_1_wave1
0021 7900        R     MOV     R1,#LOW WaveDAC8_1_wave1
0023 7D64              MOV     R5,#064H
0025 7C00              MOV     R4,#00H
0027 120000      R     LCALL   _WaveDAC8_1_Wave1Setup
                                           ; SOURCE LINE # 63
002A 7BFF              MOV     R3,#0FFH
002C 7A00        R     MOV     R2,#HIGH WaveDAC8_1_wave2
002E 7900        R     MOV     R1,#LOW WaveDAC8_1_wave2
0030 7D64              MOV     R5,#064H
0032 7C00              MOV     R4,#00H
0034 120000      R     LCALL   _WaveDAC8_1_Wave2Setup
                                           ; SOURCE LINE # 69
0037 22                RET     
             ; FUNCTION WaveDAC8_1_Init (END)

             ; FUNCTION WaveDAC8_1_Enable (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 120000      E     LCALL   WaveDAC8_1_VDAC8_Enable
                                           ; SOURCE LINE # 98
0003 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1Chan
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 7D01              MOV     R5,#01H
000A 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 99
000D 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2Chan
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 7D01              MOV     R5,#01H
0014 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 102
0017 7F00              MOV     R7,#00H
0019 120000      E     LCALL   _WaveDAC8_1_VDAC8_SetValue
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 8   

                                           ; SOURCE LINE # 105
001C 120000      E     LCALL   WaveDAC8_1_DacClk_Start
                                           ; SOURCE LINE # 107
001F 22                RET     
             ; FUNCTION WaveDAC8_1_Enable (END)

             ; FUNCTION WaveDAC8_1_Start (BEGIN)
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0000 900000      R     MOV     DPTR,#WaveDAC8_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0008 120000      R     LCALL   WaveDAC8_1_Init
                                           ; SOURCE LINE # 135
000B 900000      R     MOV     DPTR,#WaveDAC8_1_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0011         ?C0003:
                                           ; SOURCE LINE # 138
0011 120000      R     LCALL   WaveDAC8_1_Enable
                                           ; SOURCE LINE # 139
0014 22                RET     
             ; FUNCTION WaveDAC8_1_Start (END)

             ; FUNCTION _WaveDAC8_1_StartEx (BEGIN)
                                           ; SOURCE LINE # 163
0000 900000      R     MOV     DPTR,#wavePtr1
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#sampleSize1
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
000E 900000      R     MOV     DPTR,#wavePtr1
0011 120000      E     LCALL   ?C?PLDXDATA
0014 900000      R     MOV     DPTR,#sampleSize1
0017 E0                MOVX    A,@DPTR
0018 FC                MOV     R4,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 120000      R     LCALL   _WaveDAC8_1_Wave1Setup
                                           ; SOURCE LINE # 167
001F 900000      R     MOV     DPTR,#wavePtr2
0022 120000      E     LCALL   ?C?PLDXDATA
0025 900000      R     MOV     DPTR,#sampleSize2
0028 E0                MOVX    A,@DPTR
0029 FC                MOV     R4,A
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C FD                MOV     R5,A
002D 120000      R     LCALL   _WaveDAC8_1_Wave2Setup
                                           ; SOURCE LINE # 168
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 9   

0030 120000      R     LCALL   WaveDAC8_1_Start
                                           ; SOURCE LINE # 169
0033 22                RET     
             ; FUNCTION _WaveDAC8_1_StartEx (END)

             ; FUNCTION WaveDAC8_1_Stop (BEGIN)
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 191
0000 120000      E     LCALL   WaveDAC8_1_DacClk_Stop
                                           ; SOURCE LINE # 195
0003 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1Chan
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 196
000B 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2Chan
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 199
0013 120000      E     LCALL   WaveDAC8_1_VDAC8_Stop
                                           ; SOURCE LINE # 200
0016 22                RET     
             ; FUNCTION WaveDAC8_1_Stop (END)

             ; FUNCTION _WaveDAC8_1_Wave1Setup (BEGIN)
                                           ; SOURCE LINE # 218
0000 900000      R     MOV     DPTR,#wavePtr
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#sampleSize
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 223
000E 900000      R     MOV     DPTR,#wavePtr
0011 120000      E     LCALL   ?C?PLDXDATA
0014 AF01              MOV     R7,AR1
0016 AE02              MOV     R6,AR2
0018 AD03              MOV     R5,AR3
001A 7C00              MOV     R4,#00H
001C 7810              MOV     R0,#010H
001E 120000      E     LCALL   ?C?ULSHR
0021 EF                MOV     A,R7
0022 64FF              XRL     A,#0FFH
0024 4E                ORL     A,R6
0025 7006              JNZ     ?C0007
0027 7E00              MOV     R6,#00H
0029 7F10              MOV     R7,#010H
002B 8004              SJMP    ?C0008
002D         ?C0007:
002D 7E00              MOV     R6,#00H
002F 7F00              MOV     R7,#00H
0031         ?C0008:
0031 900000      R     MOV     DPTR,#memoryType
0034 EE                MOV     A,R6
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 EF                MOV     A,R7
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 10  

0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0039 900000      R     MOV     DPTR,#memoryType
003C E0                MOVX    A,@DPTR
003D FA                MOV     R2,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FB                MOV     R3,A
0041 900000      E     MOV     DPTR,#?_WaveDAC8_1_Wave1_DMA_DmaInitialize?BYTE+04H
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
0049 7D01              MOV     R5,#01H
004B 7F01              MOV     R7,#01H
004D 120000      E     LCALL   _WaveDAC8_1_Wave1_DMA_DmaInitialize
0050 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1Chan
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0055 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1TD
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 900000      R     MOV     DPTR,#sampleSize
005D E0                MOVX    A,@DPTR
005E FC                MOV     R4,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1TD
0065 E0                MOVX    A,@DPTR
0066 FB                MOV     R3,A
0067 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
006A 7401              MOV     A,#01H
006C F0                MOVX    @DPTR,A
006D 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 242
0070 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1TD
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 C007              PUSH    AR7
0077 900000      R     MOV     DPTR,#wavePtr
007A 120000      E     LCALL   ?C?PLDXDATA
007D AF01              MOV     R7,AR1
007F AE02              MOV     R6,AR2
0081 AD03              MOV     R5,AR3
0083 7C00              MOV     R4,#00H
0085 EF                MOV     A,R7
0086 54FF              ANL     A,#0FFH
0088 FF                MOV     R7,A
0089 EE                MOV     A,R6
008A 54FF              ANL     A,#0FFH
008C FE                MOV     R6,A
008D ED                MOV     A,R5
008E 5400              ANL     A,#00H
0090 FD                MOV     R5,A
0091 EC                MOV     A,R4
0092 5400              ANL     A,#00H
0094 FC                MOV     R4,A
0095 AD07              MOV     R5,AR7
0097 AC06              MOV     R4,AR6
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 11  

0099 D007              POP     AR7
009B 7B80              MOV     R3,#080H
009D 7A5B              MOV     R2,#05BH
009F 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 245
00A2 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1Chan
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 900000      R     MOV     DPTR,#WaveDAC8_1_Wave1TD
00AA E0                MOVX    A,@DPTR
00AB FD                MOV     R5,A
00AC 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 246
00AF 22                RET     
             ; FUNCTION _WaveDAC8_1_Wave1Setup (END)

             ; FUNCTION _WaveDAC8_1_Wave2Setup (BEGIN)
                                           ; SOURCE LINE # 264
0000 900000      R     MOV     DPTR,#wavePtr
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#sampleSize
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 269
000E 900000      R     MOV     DPTR,#wavePtr
0011 120000      E     LCALL   ?C?PLDXDATA
0014 AF01              MOV     R7,AR1
0016 AE02              MOV     R6,AR2
0018 AD03              MOV     R5,AR3
001A 7C00              MOV     R4,#00H
001C 7810              MOV     R0,#010H
001E 120000      E     LCALL   ?C?ULSHR
0021 EF                MOV     A,R7
0022 64FF              XRL     A,#0FFH
0024 4E                ORL     A,R6
0025 7006              JNZ     ?C0010
0027 7E00              MOV     R6,#00H
0029 7F10              MOV     R7,#010H
002B 8004              SJMP    ?C0011
002D         ?C0010:
002D 7E00              MOV     R6,#00H
002F 7F00              MOV     R7,#00H
0031         ?C0011:
0031 900000      R     MOV     DPTR,#memoryType
0034 EE                MOV     A,R6
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
0039 900000      R     MOV     DPTR,#memoryType
003C E0                MOVX    A,@DPTR
003D FA                MOV     R2,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FB                MOV     R3,A
0041 900000      E     MOV     DPTR,#?_WaveDAC8_1_Wave2_DMA_DmaInitialize?BYTE+04H
0044 E4                CLR     A
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 12  

0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
0049 7D01              MOV     R5,#01H
004B 7F01              MOV     R7,#01H
004D 120000      E     LCALL   _WaveDAC8_1_Wave2_DMA_DmaInitialize
0050 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2Chan
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0055 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2TD
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 900000      R     MOV     DPTR,#sampleSize
005D E0                MOVX    A,@DPTR
005E FC                MOV     R4,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2TD
0065 E0                MOVX    A,@DPTR
0066 FB                MOV     R3,A
0067 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
006A 7401              MOV     A,#01H
006C F0                MOVX    @DPTR,A
006D 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 288
0070 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2TD
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 C007              PUSH    AR7
0077 900000      R     MOV     DPTR,#wavePtr
007A 120000      E     LCALL   ?C?PLDXDATA
007D AF01              MOV     R7,AR1
007F AE02              MOV     R6,AR2
0081 AD03              MOV     R5,AR3
0083 7C00              MOV     R4,#00H
0085 EF                MOV     A,R7
0086 54FF              ANL     A,#0FFH
0088 FF                MOV     R7,A
0089 EE                MOV     A,R6
008A 54FF              ANL     A,#0FFH
008C FE                MOV     R6,A
008D ED                MOV     A,R5
008E 5400              ANL     A,#00H
0090 FD                MOV     R5,A
0091 EC                MOV     A,R4
0092 5400              ANL     A,#00H
0094 FC                MOV     R4,A
0095 AD07              MOV     R5,AR7
0097 AC06              MOV     R4,AR6
0099 D007              POP     AR7
009B 7B80              MOV     R3,#080H
009D 7A5B              MOV     R2,#05BH
009F 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 291
00A2 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2Chan
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 900000      R     MOV     DPTR,#WaveDAC8_1_Wave2TD
00AA E0                MOVX    A,@DPTR
C51 COMPILER V9.51   WAVEDAC8_1                                                            05/12/2014 11:42:08 PAGE 13  

00AB FD                MOV     R5,A
00AC 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 292
00AF 22                RET     
             ; FUNCTION _WaveDAC8_1_Wave2Setup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =    200    ----
   XDATA SIZE       =      5      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
